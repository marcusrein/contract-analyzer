#!/usr/bin/env node

/**
 * Setup script for contract-analyzer
 * 
 * This script helps to set up the project for local development:
 * - Creates .env file from .env.example
 * - Makes CLI script executable
 * - Initializes network configurations
 */

import fs from 'fs/promises';
import { existsSync } from 'fs';
import { initNetworkConfig } from './networks.js';
import path from 'path';
import readline from 'readline';

// Try importing nanospinner, but provide fallback if not installed
let createSpinner;
try {
    const { createSpinner: importedSpinner } = await import('nanospinner');
    createSpinner = importedSpinner;
} catch (error) {
    // Simple spinner fallback if nanospinner is not installed
    createSpinner = (text) => {
        console.log(`${text}`);
        return {
            start: () => ({
                success: ({ text }) => console.log(`‚úÖ ${text}`),
                error: ({ text }) => console.log(`‚ùå ${text}`)
            })
        };
    };
}

// Function to prompt for input
const prompt = (query) => new Promise((resolve) => {
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });
    rl.question(query, (answer) => {
        rl.close();
        resolve(answer);
    });
});

async function setup() {
    console.log('\nüöÄ Setting up contract-analyzer for Ethereum development\n');
    
    // Create .env from .env.example if it doesn't exist
    const envPath = path.join(process.cwd(), '.env');
    const envExamplePath = path.join(process.cwd(), '.env.example');
    
    if (!existsSync(envPath) && existsSync(envExamplePath)) {
        const spinner = createSpinner('Creating .env file...').start();
        try {
            await fs.copyFile(envExamplePath, envPath);
            spinner.success({ text: 'Created .env file from .env.example' });
        } catch (error) {
            spinner.error({ text: `Failed to create .env file: ${error.message}` });
            // Create a basic .env file as a fallback
            try {
                await fs.writeFile(envPath, `# Generated by setup script
RPC_URL=https://eth-mainnet.g.alchemy.com/v2/your-key
ETHERSCAN_API_KEY=your-key
SELECTED_CHAIN=ethereum
`);
                console.log('‚úÖ Created basic .env file as fallback');
            } catch (fallbackError) {
                console.error('‚ùå Could not create .env file at all:', fallbackError.message);
            }
        }
    } else {
        console.log('‚úÖ .env file already exists');
    }
    
    // Make CLI scripts executable
    const spinner = createSpinner('Making CLI scripts executable...').start();
    try {
        await fs.chmod(path.join(process.cwd(), 'cli.js'), '755');
        await fs.chmod(path.join(process.cwd(), 'test-local.js'), '755');
        spinner.success({ text: 'Made CLI scripts executable' });
    } catch (error) {
        spinner.error({ text: `Failed to make scripts executable: ${error.message}` });
        console.log('‚ÑπÔ∏è  You may need to run: chmod +x cli.js test-local.js');
    }
    
    // Initialize network configurations
    const networkSpinner = createSpinner('Initializing Ethereum network configuration...').start();
    try {
        await initNetworkConfig();
        networkSpinner.success({ text: 'Network configuration initialized' });
    } catch (error) {
        networkSpinner.error({ text: `Failed to initialize network configuration: ${error.message}` });
    }
    
    // Ask the user if they want to set up API keys now
    const setupKeys = await prompt('\nWould you like to set up Ethereum API keys now? (y/n): ');
    
    if (setupKeys.toLowerCase() === 'y') {
        // Prompt for Ethereum keys
        console.log('\nüìù Setting up API keys for Ethereum:');
        
        console.log('\nAlchemy API Key:');
        console.log('This is used to connect to the Ethereum network.');
        console.log('You can get one for free at https://www.alchemy.com/');
        const alchemyKey = await prompt('Alchemy API Key: ');
        
        console.log('\nEtherscan API Key:');
        console.log('This is used to fetch contract information and verification status.');
        console.log('You can get one for free at https://etherscan.io/apis');
        const etherscanKey = await prompt('Etherscan API Key: ');
        
        // Update .env file with the keys
        if (alchemyKey || etherscanKey) {
            const envContent = await fs.readFile(envPath, 'utf8');
            let updatedContent = envContent;
            
            if (alchemyKey) {
                updatedContent = updatedContent.replace(
                    /RPC_URL=.*/,
                    `RPC_URL=https://eth-mainnet.g.alchemy.com/v2/${alchemyKey}`
                );
            }
            
            if (etherscanKey) {
                updatedContent = updatedContent.replace(
                    /ETHERSCAN_API_KEY=.*/,
                    `ETHERSCAN_API_KEY=${etherscanKey}`
                );
            }
            
            await fs.writeFile(envPath, updatedContent);
            console.log('‚úÖ API keys saved to .env file');
        }
    }
    
    console.log('\n‚ú® Setup complete! You can now run the tool with:');
    console.log('   npm run dev [contract-address]');
    console.log('   npm run analyze -- -a <contract-address>');
    
    console.log('\nüìò To add support for other EVM chains:');
    console.log('   npm run networks:add');
    
    console.log('\nüîç For more options, run: npm run help');
}

// Run the setup
setup().catch(console.error); 